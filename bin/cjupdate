#!/usr/bin/php -f
<?php
if (isset($argv[1])) {
	$projname = "/".$argv[1];
} else {
	$projname = "";
}

// path initialize
$projdir = realpath(__DIR__."/..");

$system_ini = parse_ini_file($projdir."/configs/system.ini", true);
$environ = $system_ini["ENVIRON"];
$csslist = $system_ini["JQUERYUI-CSS"];

$smartypath   = $environ["smartypath"];
$homedir      = realpath(".").$projname;
$p_syslibs    = $projdir."/syslibs";
$p_extjslibs  = $projdir."/extlibs";
$p_jskit      = $projdir."/JSKit";
$p_framework  = $p_jskit."/frameworks";
$p_sysphplibs = $projdir."/phplibs";
$h_syslibs    = $homedir."/syslibs";
$h_usrlibs    = realpath($homedir."/usrlibs");
$h_framework  = realpath("$h_syslibs/frameworks");

$user_ini = parse_ini_file($homedir."/configs/system.ini", true);
$usrenviron = $user_ini["ENVIRON"];
$usecss = $usrenviron["jqueryui-theme"];

// setup smarty
if (!defined("SMARTY_DIR")) {
    define("SMARTY_DIR", $smartypath);
}
require_once(SMARTY_DIR . "/Smarty.class.php");
$smarty = new Smarty();
$smarty->template_dir   = $projdir."/templates";
$smarty->compile_dir    = $projdir."/templates_c";
$smarty->config_dir     = $projdir."/configs";
$smarty->cache_dir      = $projdir."/cache";

// change delimiter
$smarty->left_delimiter = "[{";
$smarty->right_delimiter = "}]";

// create index.php
$cssuri = $csslist[$usecss];
$smarty->assign("jqueryuicss", $cssuri);
$index = $smarty->fetch("index.tmpl");
$fp = fopen($homedir."/index.php", "w");
fputs($fp, $index);
fclose($fp);

// compile JSKit
$path = $p_jskit;
$dir = opendir($path);
$file_arr = array();
while ($fname = readdir($dir)) {
	// もし、検索してきたものが「ディレクトリ」「ドットで始まっている」「数字で始まっていない」のどれかだったら対象外
	if (is_dir("$path/$fname") == true || preg_match("/^\./", $fname) == true || preg_match("/^\d/", $fname) == false) {
		continue;
	}
	
	// CoffeeScriptでコンパイルするファイル一覧配列ソースファイルのパスを登録する
	$file_arr[] = "$path/$fname";
}
sort($file_arr);
$compile = implode(" ", $file_arr);
system("coffee -j JSKit.js -b -o ".$h_syslibs." -c ".$compile);
system("coffee -b -o ".$h_syslibs." -c ".$p_syslibs);

// compile Framework
$path = $p_framework;
$dir = opendir($path);
while ($dirname = readdir($dir)) {
	// もし、検索してきたものが「ディレクトリ」、且つ「ドットで始まっていない」、且つ「*.framework」という名前だったらフレームワークとしてコンパイル
	if (is_dir("$path/$dirname") == true && preg_match("/^\./", $dirname) == false && preg_match("/.*\.framework/", $dirname) == true) {
		$execstr = "coffee -j $dirname.js -b -o $h_framework -c $path/$dirname";
		system($execstr);
	}
}

// copy js file
$srcdir = $p_extjslibs;
$dir = opendir($srcdir);
while ($fname = readdir($dir)) {
	if (!preg_match("/.*\.js/", $fname) || preg_match("/^\./", $fname)) {
		continue;
	}
	$src = $srcdir."/".$fname;
	copy($src, $h_syslibs."/".$fname);
}

// copy php file
$srcdir = $p_sysphplibs;
$dir = opendir($srcdir);
while ($fname = readdir($dir)) {
	if (is_dir($srcdir."/".$fname) == true) {
		continue;
	}
	$src = $srcdir."/".$fname;
	copy($src, $h_syslibs."/".$fname);
}

// copy external library file
system("cp -a ".$p_extjslibs."/codeJS_default ".$h_syslibs."/");
copy($p_extjslibs."/three.min.js", $h_syslibs."/three.min.js");

// copy htaccess file(hidden)
copy($p_syslibs."/htaccess", $homedir."/configs/.htaccess");
copy($p_syslibs."/htaccess", $homedir."/Library/.htaccess");
copy($p_syslibs."/htaccess", $homedir."/templates/.htaccess");
copy($p_syslibs."/htaccess", $homedir."/appscode/.htaccess");

// copy htaccess file(open)
system("cp -a ".$p_syslibs."/Picture ".$h_syslibs."/");
copy($p_syslibs."/htaccess2", $homedir."/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/usrlibs/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/syslibs/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/cache/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/Plugins/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/Documents/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/Media/Movie/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/Media/Music/.htaccess");
copy($p_syslibs."/htaccess2", $homedir."/Media/Picture/.htaccess");

echo "Update System File Done.\n"
?>

